-- Table: programas

 DROP TABLE programas;
SET search_path = poa2010, pg_catalog;
CREATE TABLE programas
(
  id serial NOT NULL,
  descricao character varying(500) NOT NULL,
  interfaces character varying(200) NOT NULL,
  situacao_id smallint NOT NULL DEFAULT 1,
  responsavel_id integer NOT NULL,
  inclusao_data timestamp without time zone NOT NULL DEFAULT now(),
  inclusao_usuario_id integer NOT NULL,
  alteracao_data timestamp without time zone NOT NULL DEFAULT now(),
  alteracao_usuario_id integer NOT NULL,
  menu character varying(20),
  ordem integer DEFAULT currval('programas_id_seq'::regclass),
  CONSTRAINT pk_programas_id PRIMARY KEY (id),
  CONSTRAINT fk_programas_responsavel_id FOREIGN KEY (responsavel_id)
      REFERENCES public.usuarios (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE RESTRICT,
  CONSTRAINT fk_situacoes_programas FOREIGN KEY (situacao_id)
      REFERENCES public.situacoes (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE RESTRICT
)
WITH (
  OIDS=FALSE
);
ALTER TABLE programas OWNER TO planejamento;

-- Index: programas_alteracao_usuario_id_index

-- DROP INDEX programas_alteracao_usuario_id_index;

CREATE INDEX programas_alteracao_usuario_id_index
  ON programas
  USING btree
  (alteracao_usuario_id);

-- Index: programas_responsavel_id_index

-- DROP INDEX programas_responsavel_id_index;

CREATE INDEX programas_responsavel_id_index
  ON programas
  USING btree
  (responsavel_id);


-- Table: projetos

-- DROP TABLE projetos;

CREATE TABLE projetos
(
  id serial NOT NULL,
  descricao character varying,
  interfaces character varying,
  situacao_id smallint NOT NULL DEFAULT 1,
  programa_id integer,
  responsavel_id integer NOT NULL,
  inclusao_data timestamp without time zone NOT NULL DEFAULT now(),
  inclusao_usuario_id integer NOT NULL,
  alteracao_data timestamp without time zone NOT NULL DEFAULT now(),
  alteracao_usuario_id integer NOT NULL,
  menu character varying(20),
  projeto_id integer,
  ordem integer DEFAULT currval('projetos_id_seq'::regclass),
  CONSTRAINT pk_projeto_id PRIMARY KEY (id),
CONSTRAINT fk_projetos_responsavel_id FOREIGN KEY (responsavel_id)
      REFERENCES public.usuarios (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE RESTRICT,  
  CONSTRAINT fk_projetos_programa_id FOREIGN KEY (programa_id)
      REFERENCES programas (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_subprojeto_projeto_id FOREIGN KEY (projeto_id)
      REFERENCES projetos (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE projetos OWNER TO postgres;

-- Index: projetos_programa_id_index

-- DROP INDEX projetos_programa_id_index;

CREATE INDEX projetos_programa_id_index
  ON projetos
  USING btree
  (programa_id);

-- Index: projetos_situacao_index

-- DROP INDEX projetos_situacao_index;

CREATE INDEX projetos_situacao_index
  ON projetos
  USING btree
  (situacao_id);


-- Table: objetivos_programa

-- DROP TABLE objetivos_programa;

CREATE TABLE objetivos_programa
(
  id serial NOT NULL,
  descricao character varying NOT NULL DEFAULT 500,
  programa_id integer NOT NULL,
  CONSTRAINT pk_objetivos_programas_id PRIMARY KEY (id),
  CONSTRAINT fk_objetivoprograma_programa_id FOREIGN KEY (programa_id)
      REFERENCES programas (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE objetivos_programa OWNER TO postgres;

  

-- Table: objetivos_projeto

-- DROP TABLE objetivos_projeto;

CREATE TABLE objetivos_projeto
(
  id serial NOT NULL,
  descricao character varying NOT NULL,
  projeto_id integer NOT NULL,
  CONSTRAINT pk_objetivos_projeto_id PRIMARY KEY (id),
  CONSTRAINT fk_objetivosprojeto_projeto_id FOREIGN KEY (projeto_id)
      REFERENCES projetos (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE objetivos_projeto OWNER TO postgres;
-- Table: metas_programa

-- DROP TABLE metas_programa;

CREATE TABLE metas_programa
(
  id serial NOT NULL,
  descricao character varying NOT NULL,
  programa_id integer NOT NULL,
  CONSTRAINT pk_meta_programas_id PRIMARY KEY (id),
  CONSTRAINT fk_metasprograma_programa_id FOREIGN KEY (programa_id)
      REFERENCES programas (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE metas_programa OWNER TO postgres;

-- Table: metas_projeto

-- DROP TABLE metas_projeto;

CREATE TABLE metas_projeto
(
  id serial NOT NULL,
  descricao character varying NOT NULL,
  projeto_id integer NOT NULL,
  CONSTRAINT pk_metas_projeto_id PRIMARY KEY (id),
  CONSTRAINT fk_metasprojeto_projeto_id FOREIGN KEY (projeto_id)
      REFERENCES projetos (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE metas_projeto OWNER TO postgres;



--
-- TABLE: tipos_periodos
-- 
--  

CREATE TABLE public.tipos_periodos (
  id serial NOT NULL ,
  periodo character varying NOT NULL ,
  descricao character varying NOT NULL 
);

-- 
ALTER TABLE public.tipos_periodos ADD CONSTRAINT pk_tipo_periodo_id PRIMARY KEY (id);



--
-- TABLE: objetivos_especificos
-- 
--  

CREATE TABLE objetivos_especificos (
  id serial NOT NULL ,
  descricao character varying(200),
  menu character varying(30) NOT NULL ,
  recursos character varying,
  cronograma character varying,
  situacao_id smallint DEFAULT 1,
  projeto_id int NOT NULL ,
  ordem integer DEFAULT currval('objetivos_especificos_id_seq'::regclass),
  inclusao_data timestamp without time zone NOT NULL  DEFAULT now(),
  inclusao_usuario_id integer NOT NULL ,
  alteracao_data timestamp without time zone NOT NULL  DEFAULT now(),
  alteracao_usuario_id integer NOT NULL,
  CONSTRAINT fk_situacao_objetivo_especifico FOREIGN KEY (situacao_id)
      REFERENCES public.situacoes (id) MATCH SIMPLE
      ON UPDATE RESTRICT ON DELETE RESTRICT 
 
);

-- 
ALTER TABLE objetivos_especificos ADD CONSTRAINT pk_objetivos_especificos_id PRIMARY KEY (id);

CREATE INDEX objetivos_especificos_projeto_id_index  ON objetivos_especificos(projeto_id);
ALTER TABLE objetivos_especificos ADD CONSTRAINT fk_objetivos_especificos_projeto_id FOREIGN KEY (projeto_id) REFERENCES projetos (id);


--
-- TABLE: metas
-- 
--  

CREATE TABLE metas (
  id serial NOT NULL ,
  descricao character varying(200),
  situacao_id int NOT NULL  DEFAULT 1,
  objetivo_especifico_id int,
  inclusao_data timestamp without time zone NOT NULL  DEFAULT now(),
  inclusao_usuario_id integer NOT NULL ,
  alteracao_data timestamp without time zone NOT NULL  DEFAULT now(),
  alteracao_usuario_id integer NOT NULL ,
    CONSTRAINT fk_situacao_metas FOREIGN KEY (situacao_id)
      REFERENCES public.situacoes (id) MATCH SIMPLE
      ON UPDATE RESTRICT ON DELETE RESTRICT 
);

-- 
ALTER TABLE metas ADD CONSTRAINT pk_meta_id PRIMARY KEY (id);

CREATE INDEX metas_situacao_id_index  ON metas(situacao_id);

CREATE INDEX metas_objetivo_especifico_id_index  ON metas(objetivo_especifico_id);
ALTER TABLE metas ADD CONSTRAINT fk_metas_objetivo_especifico_id FOREIGN KEY (objetivo_especifico_id) REFERENCES objetivos_especificos (id);


--
-- TABLE: parcerias
-- 
--  

CREATE TABLE parcerias (
  id serial NOT NULL ,
  descricao character varying(200),
  situacao_id smallint NOT NULL  DEFAULT 1,
  objetivo_especifico_id int NOT NULL ,
  inclusao_data timestamp without time zone NOT NULL  DEFAULT now(),
  inclusao_usuario_id integer NOT NULL ,
  alteracao_data timestamp without time zone NOT NULL  DEFAULT now(),
  alteracao_usuario_id integer NOT NULL ,
  CONSTRAINT fk_situacao_parcerias FOREIGN KEY (situacao_id)
      REFERENCES public.situacoes (id) MATCH SIMPLE
      ON UPDATE RESTRICT ON DELETE RESTRICT 

);

-- 
ALTER TABLE parcerias ADD CONSTRAINT pk_parceria_id PRIMARY KEY (id);

CREATE INDEX parcerias_situacao_id_index  ON parcerias(situacao_id);

CREATE INDEX parcerias_objetivo_especifico_id_index  ON parcerias(objetivo_especifico_id);
ALTER TABLE parcerias ADD CONSTRAINT fk_parcerias_objetivo_especifico_id FOREIGN KEY (objetivo_especifico_id) REFERENCES objetivos_especificos (id);



--
-- TABLE: estrategias
-- 
--  

CREATE TABLE estrategias (
  id serial NOT NULL ,
  descricao character varying(200),
  situacao_id smallint NOT NULL  DEFAULT 1,
  objetivo_especifico_id integer,
  objetivo_id integer NOT NULL ,
  inclusao_data timestamp without time zone NOT NULL  DEFAULT now(),
  inclusao_usuario_id integer NOT NULL ,
  alteracao_data timestamp without time zone NOT NULL  DEFAULT now(),
  alteracao_usuario_id integer NOT NULL,
  CONSTRAINT fk_situacao_estrategias FOREIGN KEY (situacao_id)
      REFERENCES public.situacoes (id) MATCH SIMPLE
      ON UPDATE RESTRICT ON DELETE RESTRICT 
);

-- 
ALTER TABLE estrategias ADD CONSTRAINT pk_estrategia_id PRIMARY KEY (id);

CREATE INDEX estrategias_situacao_id_index  ON estrategias(situacao_id);

CREATE INDEX estrategias_objetivo_id_index  ON estrategias(objetivo_id);
ALTER TABLE estrategias ADD CONSTRAINT fk_estrategias_objetivo_especifico_id FOREIGN KEY (objetivo_especifico_id) REFERENCES objetivos_especificos (id);



--
-- TABLE: operacoes
-- 
--  

CREATE TABLE operacoes (
  id serial NOT NULL ,
  descricao character varying NOT NULL ,
  meta_id integer NOT NULL ,
  situacao_id integer NOT NULL ,
  inclusao_data timestamp without time zone NOT NULL  DEFAULT now(),
  inclusao_usuario_id integer NOT NULL ,
  alteracao_data timestamp without time zone NOT NULL  DEFAULT now(),
  alteracao_usurio_id integer NOT NULL ,
  CONSTRAINT fk_situacao_operacoes FOREIGN KEY (situacao_id)
      REFERENCES public.situacoes (id) MATCH SIMPLE
      ON UPDATE RESTRICT ON DELETE RESTRICT
);
ALTER TABLE operacoes ADD CONSTRAINT pk_operacoes_id PRIMARY KEY (id);
ALTER TABLE operacoes ADD CONSTRAINT fk_operacoes_meta_id FOREIGN KEY (meta_id) REFERENCES metas (id);

--
-- TABLE: atividades
-- 
--  

CREATE TABLE atividades (
  id serial NOT NULL ,
  descricao character varying NOT NULL ,
  operacao_id integer NOT NULL ,
  valor float,
  responsavel character varying,
  intersecao character varying,
  inicio_data date,
  prazo_data date,
  situacao_id integer NOT NULL  DEFAULT 1,
  inclusao_data timestamp without time zone NOT NULL  DEFAULT now(),
  inclusao_usuario_id integer NOT NULL ,
  alteracao_data timestamp without time zone NOT NULL  DEFAULT now(),
  alteracao_usuario_id timestamp without time zone NOT NULL  DEFAULT now(),
  CONSTRAINT fk_situacao_atividades FOREIGN KEY (situacao_id)
      REFERENCES public.situacoes (id) MATCH SIMPLE
      ON UPDATE RESTRICT ON DELETE RESTRICT
);

-- 
ALTER TABLE atividades ADD CONSTRAINT pk_atividades_id PRIMARY KEY (id);
ALTER TABLE atividades ADD CONSTRAINT fk_atividades_operacao_id FOREIGN KEY (operacao_id) REFERENCES operacoes (id);



--
-- TABLE: indicadores_configuracoes
-- Tabela com as configurações do indicador
-- cada indicador pode apresentar de períodos de cálculo
--  

CREATE TABLE public.indicadores_configuracoes (
  id serial NOT NULL ,
  indicador_id int NOT NULL ,
  tipo_periodo_id int NOT NULL 
);

-- 
ALTER TABLE public.indicadores_configuracoes ADD CONSTRAINT pk_indicador_config_id PRIMARY KEY (id);
ALTER TABLE public.indicadores_configuracoes ADD CONSTRAINT fk_indicador_config_indicador_id FOREIGN KEY (indicador_id) REFERENCES public.indicadores (id);
ALTER TABLE public.indicadores_configuracoes ADD CONSTRAINT fk_indicador_config_tipo_periodo_id FOREIGN KEY (tipo_periodo_id) REFERENCES public.tipos_periodos (id);

--
-- TABLE: indicadores_meta
-- 
--  

CREATE TABLE public.indicadores_meta (
  id serial NOT NULL ,
  meta_id integer NOT NULL ,
  indicador_id integer NOT NULL 
);

-- 
ALTER TABLE public.indicadores_meta ADD CONSTRAINT pk_indicadores_meta_id PRIMARY KEY (id);
ALTER TABLE public.indicadores_meta ADD CONSTRAINT pk_indicadores_meta_meta_id FOREIGN KEY (meta_id) REFERENCES metas (id);
ALTER TABLE public.indicadores_meta ADD CONSTRAINT pk_indicadores_meta_indicador_id FOREIGN KEY (indicador_id) REFERENCES public.indicadores (id);
